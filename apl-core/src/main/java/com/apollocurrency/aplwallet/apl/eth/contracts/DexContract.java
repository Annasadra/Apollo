package com.apollocurrency.aplwallet.apl.eth.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class DexContract extends Contract {
    private static final String BINARY = "608060405260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280610258815260200162ed4e0081525060056000820151816000015560208201518160010155505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3613796806101446000396000f3fe6080604052600436106101355760003560e01c80637dc4da2e116100ab578063a4cdbd141161006f578063a4cdbd14146107f3578063b6b55f2514610838578063ecb4105414610866578063eda1122c146108cf578063f2fde38b1461090a578063f7b3ae2f1461095b57610135565b80637dc4da2e146106375780638da5cb5b146106a65780638dbdbe6d146106fd5780638f32d59b146107625780639fe21fc41461079157610135565b8063655ac12c116100fd578063655ac12c146103c75780636d72dc38146104b5578063715018a6146104e75780637249fbb6146104fe57806377b0dd70146105395780637c68bebe146105d257610135565b806318df00381461013a5780632e1a7d4d146101975780634861f39b146101d257806354ef481d1461028a578063571694cd14610378575b600080fd5b34801561014657600080fd5b506101736004803603602081101561015d57600080fd5b8101908080359060200190929190505050610a74565b6040518082600181111561018357fe5b60ff16815260200191505060405180910390f35b3480156101a357600080fd5b506101d0600480360360208110156101ba57600080fd5b8101908080359060200190929190505050610a86565b005b3480156101de57600080fd5b5061022b600480360360408110156101f557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cda565b60405180851515151581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018215151515815260200194505050505060405180910390f35b34801561029657600080fd5b506102d9600480360360208110156102ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d1a565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610320578082015181840152602081019050610305565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610362578082015181840152602081019050610347565b5050505090500194505050505060405180910390f35b34801561038457600080fd5b506103b16004803603602081101561039b57600080fd5b8101908080359060200190929190505050610f48565b6040518082815260200191505060405180910390f35b3480156103d357600080fd5b50610416600480360360208110156103ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f5a565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561045d578082015181840152602081019050610442565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561049f578082015181840152602081019050610484565b5050505090500194505050505060405180910390f35b3480156104c157600080fd5b506104ca6112cd565b604051808381526020018281526020019250505060405180910390f35b3480156104f357600080fd5b506104fc6112e4565b005b34801561050a57600080fd5b506105376004803603602081101561052157600080fd5b81019080803590602001909291905050506113b6565b005b34801561054557600080fd5b506105d0600480360360c081101561055c57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116eb565b005b3480156105de57600080fd5b50610621600480360360208110156105f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061170a565b6040518082815260200191505060405180910390f35b34801561064357600080fd5b506106a46004803603608081101561065a57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611756565b005b3480156106b257600080fd5b506106bb611c35565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070957600080fd5b506107606004803603606081101561072057600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c5f565b005b34801561076e57600080fd5b50610777611e5e565b604051808215151515815260200191505060405180910390f35b6107f1600480360360808110156107a757600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611eb6565b005b3480156107ff57600080fd5b506108366004803603604081101561081657600080fd5b810190808035906020019092919080359060200190929190505050611ed1565b005b6108646004803603602081101561084e57600080fd5b8101908080359060200190929190505050611fcd565b005b34801561087257600080fd5b506108b56004803603602081101561088957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061211b565b604051808215151515815260200191505060405180910390f35b3480156108db57600080fd5b50610908600480360360208110156108f257600080fd5b810190808035906020019092919050505061212d565b005b34801561091657600080fd5b506109596004803603602081101561092d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124d1565b005b34801561096757600080fd5b506109946004803603602081101561097e57600080fd5b81019080803590602001909291905050506124ee565b604051808a81526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001826003811115610a5857fe5b60ff168152602001995050505050505050505060405180910390f35b6000610a7f826126de565b9050919050565b60011515610a933361277e565b151514610b08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f77697468647261773a207468652075736572206973206e6f742061637469766581525060200191505060405180910390fd5b610b1061320b565b610b1a82336127d7565b9050600081602001519050600082604001519050600015158360600151151514610b8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604a81526020018061332c604a913960600191505060405180910390fd5b610b9984336128db565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c3b573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c35573d6000803e3d6000fd5b50610c67565b610c6633828473ffffffffffffffffffffffffffffffffffffffff166129559092919063ffffffff16565b5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f44caac6b5921bbf9e5a91b5c88bae1355a24b50a810dfd697818636334049a1e8684604051808381526020018281526020019250505060405180910390a350505050565b600080600080610ce861320b565b610cf287876127d7565b9050806000015181602001518260400151836060015194509450945094505092959194509250565b6060806000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905080604051908082528060200260200182016040528015610d935781602001602082028038833980820191505090505b50925080604051908082528060200260200182016040528015610dc55781602001602082028038833980820191505090505b509150600080905060008090505b828111610f3a576000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000838152602001908152602001600020549050600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082815260200190815260200160002060000160009054906101000a900460ff1615610f2c5780868481518110610ea857fe5b602002602001018181525050600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082815260200190815260200160002060010154858481518110610f1757fe5b60200260200101818152505082806001019350505b508080600101915050610dd3565b508383935093505050915091565b6000610f5382612a26565b9050919050565b6060806000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490508060405190808252806020026020018201604052801561101a5781602001602082028038833980820191505090505b5092508060405190808252806020026020018201604052801561104c5781602001602082028038833980820191505090505b509350600080905060008090505b8381116112be5761106961324d565b60036000600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600085815260200190815260200160002054815260200190815260200160002060405180610140016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16600381111561123757fe5b600381111561124257fe5b8152505090506001600381111561125557fe5b816101200151600381111561126657fe5b14156112b0578060e0015187848151811061127d57fe5b60200260200101818152505080610100015186848151811061129b57fe5b60200260200101818152505082806001019350505b50808060010191505061105a565b50838594509450505050915091565b600080600560000154600560010154915091509091565b6112ec611e5e565b6112f557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b8033600160038111156113c557fe5b6003600084815260200190815260200160002060090160009054906101000a900460ff1660038111156113f457fe5b1461144a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604f815260200180613550604f913960600191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260418152602001806134146041913960600191505060405180910390fd5b60006003600084815260200190815260200160002060010154905080421015611578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d81526020018061359f602d913960400191505060405180910390fd5b600380600086815260200190815260200160002060090160006101000a81548160ff021916908360038111156115aa57fe5b021790555061161d6003600086815260200190815260200160002060080154336003600088815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003600089815260200190815260200160002060070154612aec565b50600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008154809291906001900391905055503373ffffffffffffffffffffffffffffffffffffffff167f222b84eaf6103dc4589b81de12d7b2f6a1d0b45039451d2af236473910c4a2406003600087815260200190815260200160002060080154864260405180848152602001838152602001828152602001935050505060405180910390a250505050565b6116f6868686611c5f565b61170286848484611756565b505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b826000600381111561176457fe5b6003600083815260200190815260200160002060090160009054906101000a900460ff16600381111561179357fe5b146117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260498152602001806137196049913960600191505060405180910390fd5b6117f5603c8302612cb8565b6117fd61320b565b61180786336127d7565b905060011515816000015115151461186a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e81526020018061361b603e913960400191505060405180910390fd5b6000151581606001511515146118cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613490602f913960400191505060405180910390fd5b600081604001511415611929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604e8152602001806133c6604e913960600191505060405180910390fd5b61193386336128db565b5080602001516003600087815260200190815260200160002060060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060400151600360008781526020019081526020016000206007018190555060016003600087815260200190815260200160002060090160006101000a81548160ff021916908360038111156119df57fe5b0217905550336003600087815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836003600087815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846003600087815260200190815260200160002060020181905550856003600087815260200190815260200160002060080181905550426003600087815260200190815260200160002060000181905550603c8302420160036000878152602001908152602001600020600101819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905085816002016000836000015481526020019081526020016000208190555080600001600081548092919060010191905055508060010160008154809291906001019190505550816020015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f91acd19eaf946e9dde3bbe5c8b1d0c4e95684f4bbce98fcd2c53e8777af7c6368a8a428a8960400151604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a450505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b823360001515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600084815260200190815260200160002060000160009054906101000a900460ff16151514611d21576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806132f46038913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611dc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6465706f7369743a20696e76616c696420746f6b656e2061646472657373000081525060200191505060405180910390fd5b6000841415611e1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604e815260200180613502604e913960600191505060405180910390fd5b611e4b3330868673ffffffffffffffffffffffffffffffffffffffff16612d77909392919063ffffffff16565b611e5785338587612e7d565b5050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b611ebf84611fcd565b611ecb84848484611756565b50505050565b611ed9611e5e565b611ee257600080fd5b6000821415611f3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260438152602001806134bf6043913960600191505060405180910390fd5b81811015611f95576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260418152602001806136596041913960600191505060405180910390fd5b6040518060400160405280603c84028152602001603c8302815250600560008201518160000155602082015181600101559050505050565b803360001515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600084815260200190815260200160002060000160009054906101000a900460ff1615151461208f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806132f46038913960400191505060405180910390fd5b60003414156120e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b815260200180613455603b913960400191505060405180910390fd5b61211683336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634612e7d565b505050565b60006121268261277e565b9050919050565b80600061213982612a26565b90506001600381111561214857fe5b6003600083815260200190815260200160002060090160009054906101000a900460ff16600381111561217757fe5b146121cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604f8152602001806136ca604f913960600191505060405180910390fd5b600060036000838152602001908152602001600020600101549050428111612240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603081526020018061369a6030913960400191505060405180910390fd5b600061224b85612a26565b905060026003600083815260200190815260200160002060090160006101000a81548160ff0219169083600381111561228057fe5b021790555060006003600083815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060018111156122cd57fe5b6122d6836126de565b60018111156122e157fe5b141561234f5760008190508073ffffffffffffffffffffffffffffffffffffffff166108fc60036000868152602001908152602001600020600701549081150290604051600060405180830381858888f19350505050158015612348573d6000803e3d6000fd5b50506123c7565b6123c68160036000858152602001908152602001600020600701546003600086815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129559092919063ffffffff16565b5b856003600084815260200190815260200160002060030181905550600460006003600085815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008154809291906001900391905055508073ffffffffffffffffffffffffffffffffffffffff167fd8c410238ddcadd482d857c422e62972bcd5b63864095af0499a9c530d777c8d83428960405180848152602001838152602001828152602001935050505060405180910390a2505050505050565b6124d9611e5e565b6124e257600080fd5b6124eb81612f57565b50565b600080600080600080600080600061250461324d565b600360008c815260200190815260200160002060405180610140016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16600381111561267f57fe5b600381111561268a57fe5b815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e00151886101200151995099509950995099509950995099509950509193959799909294969850565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156127745760009050612779565b600190505b919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050919050565b6127df61320b565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008481526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905092915050565b600060018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600085815260200190815260200160002060020160006101000a81548160ff0219169083151502179055506001905092915050565b612a21838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613051565b505050565b6000600282604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310612a7d5780518252602082019150602081019050602083039250612a5a565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015612abf573d6000803e3d6000fd5b5050506040513d6020811015612ad457600080fd5b81019080805190602001909291905050509050919050565b600084600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015481526020019081526020016000208190555060405180608001604052806001151581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600087815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020160006101000a81548160ff02191690831515021790555090505060019050949350505050565b600560000154811015612d16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604f8152602001806135cc604f913960600191505060405180910390fd5b806005600101541015612d74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260508152602001806133766050913960600191505060405180910390fd5b50565b612e77848573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613051565b50505050565b612e868361317e565b50612e9384848484612aec565b5060018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f2389aeb1847d9139fac317075af2ac7ace8586c66ea0fa893970980ab2be43568684604051808381526020018281526020019250505060405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f9157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6130708273ffffffffffffffffffffffffffffffffffffffff166131f8565b61307957600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106130c857805182526020820191506020810190506020830392506130a5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461312a576040519150601f19603f3d011682016040523d82523d6000602084013e61312f565b606091505b50915091508161313e57600080fd5b6000815111156131785780806020019051602081101561315d57600080fd5b810190808051906020019092919050505061317757600080fd5b5b50505050565b600080151561318c8361277e565b151514156131ef5760018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505b60019050919050565b600080823b905060008111915050919050565b6040518060800160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b60405180610140016040528060008152602001600081526020016000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600060038111156132ed57fe5b8152509056fe6f72646572496449734e6f744465706f73697465643a207573657220616c7265616479206465706f7369742074686973206f72646572496477697468647261773a2074686973206f7264657220496420686173206265656e20616c72656164792077697468647261776e206f722077616974696e6720666f722074686520737761705f76616c6964617465526566756e6454696d657374616d703a207468652074696d657374616d702073686f756c6420626520736d616c6c6572207468616e206d61782073776170206c69666574696d65696e6974696174653a2074686973206f7264657220496420686173206265656e2077697468647261776e2c2066696e6973686564206f722077616974696e6720666f72207468652072656465656d6973526566756e6461626c653a206f6e6c792074686520696e69746961746f72206f662074686520737761702063616e2063616c6c2074686973206d6574686f646465706f7369743a2075736572206e6565647320746f207472616e736665722045544820666f722063616c6c696e672074686973206d6574686f64696e6974696174653a2074686973206f72646572206465706f73697420686173206265656e2077697468647261776e6368616e6765537761704c69666574696d654c696d6974733a206e65774d696e20616e64206e65774d61782073686f756c6420626520626967676572207468656e20306465706f7369743a2075736572206e6565647320746f2066696c6c207472616e7366657261626c6520746f6b656e7320616d6f756e7420666f722063616c6c696e672074686973206d6574686f646973526566756e6461626c653a20746865207377617020776974682074686973207365637265744861736820646f6573206e6f74206578697374206f7220686173206265656e2066696e69736865646973526566756e6461626c653a2074686520726566756e64206973206e6f7420617661696c61626c65206e6f775f76616c6964617465526566756e6454696d657374616d703a207468652074696d657374616d702073686f756c6420626520626967676572207468616e206d696e2073776170206c69666574696d65696e6974696174653a2074686973206f7264657220496420686173206e6f74206265656e206372656174656420616e64206465706f7369746564207965746368616e6765537761704c69666574696d654c696d6974733a20746865206e65774d61782073686f756c6420626520626967676572207468656e206e65774d6178697352656465656d61626c653a207468652072656465656d20697320636c6f73656420666f7220746869732073776170697352656465656d61626c653a20746865207377617020776974682074686973207365637265744861736820646f6573206e6f74206578697374206f7220686173206265656e2066696e697368656469734e6f74496e697469617465643a20746869732073656372657420686173682077617320616c726561647920757365642c20706c656173652075736520616e6f74686572206f6e65a265627a7a72305820147bc93056ba8b967731ff157eed3935486237367f5aeb93d887d2f51ccb052464736f6c634300050a0032";

    public static final String FUNC_GETSWAPTYPE = "getSwapType";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_GETDEPOSITEDORDERDETAILS = "getDepositedOrderDetails";

    public static final String FUNC_GETUSERFILLEDDEPOSITS = "getUserFilledDeposits";

    public static final String FUNC_GETHASHOFSECRET = "getHashOfSecret";

    public static final String FUNC_GETUSERFILLEDORDERS = "getUserFilledOrders";

    public static final String FUNC_GETSWAPLIFETIMELIMITS = "getSwapLifetimeLimits";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REFUND = "refund";

    public static final String FUNC_DEPOSITANDINITIATE = "depositAndInitiate";

    public static final String FUNC_GETUSERDEPOSITSAMOUNT = "getUserDepositsAmount";

    public static final String FUNC_INITIATE = "initiate";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_CHANGESWAPLIFETIMELIMITS = "changeSwapLifetimeLimits";

    public static final String FUNC_DOESUSEREXIST = "doesUserExist";

    public static final String FUNC_REDEEM = "redeem";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETSWAPDATA = "getSwapData";

    public static final Event INITIATED_EVENT = new Event("Initiated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REDEEMED_EVENT = new Event("Redeemed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REFUNDED_EVENT = new Event("Refunded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ASSETDEPOSITED_EVENT = new Event("AssetDeposited", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ASSETWITHDRAWAL_EVENT = new Event("AssetWithdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected DexContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DexContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DexContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DexContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> getSwapType(byte[] secretHash) {
        final Function function = new Function(FUNC_GETSWAPTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(secretHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger orderId) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<Boolean, String, BigInteger, Boolean>> getDepositedOrderDetails(BigInteger orderId, String user) {
        final Function function = new Function(FUNC_GETDEPOSITEDORDERDETAILS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderId),
                        new org.web3j.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteCall<Tuple4<Boolean, String, BigInteger, Boolean>>(
                new Callable<Tuple4<Boolean, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<Boolean, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Boolean, String, BigInteger, Boolean>(
                                (Boolean) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>> getUserFilledDeposits(String user) {
        final Function function = new Function(FUNC_GETUSERFILLEDDEPOSITS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<byte[]> getHashOfSecret(byte[] secret) {
        final Function function = new Function(FUNC_GETHASHOFSECRET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(secret)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>> getUserFilledOrders(String user) {
        final Function function = new Function(FUNC_GETUSERFILLEDORDERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> getSwapLifetimeLimits() {
        final Function function = new Function(FUNC_GETSWAPLIFETIMELIMITS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> refund(byte[] secretHash) {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(secretHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> depositAndInitiate(BigInteger orderId, BigInteger amount, String token, byte[] secretHash, String recipient, BigInteger refundTimestamp) {
        final Function function = new Function(
                FUNC_DEPOSITANDINITIATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(token), 
                new org.web3j.abi.datatypes.generated.Bytes32(secretHash), 
                new org.web3j.abi.datatypes.Address(recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(refundTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getUserDepositsAmount(String user) {
        final Function function = new Function(FUNC_GETUSERDEPOSITSAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> initiate(BigInteger orderId, byte[] secretHash, String recipient, BigInteger refundTimestamp) {
        final Function function = new Function(
                FUNC_INITIATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderId), 
                new org.web3j.abi.datatypes.generated.Bytes32(secretHash), 
                new org.web3j.abi.datatypes.Address(recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(refundTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger orderId, BigInteger amount, String token) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> depositAndInitiate(BigInteger orderId, byte[] secretHash, String recipient, BigInteger refundTimestamp, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITANDINITIATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderId), 
                new org.web3j.abi.datatypes.generated.Bytes32(secretHash), 
                new org.web3j.abi.datatypes.Address(recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(refundTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> changeSwapLifetimeLimits(BigInteger newMin, BigInteger newMax) {
        final Function function = new Function(
                FUNC_CHANGESWAPLIFETIMELIMITS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newMin), 
                new org.web3j.abi.datatypes.generated.Uint256(newMax)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger orderId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Boolean> doesUserExist(String user) {
        final Function function = new Function(FUNC_DOESUSEREXIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> redeem(byte[] secret) {
        final Function function = new Function(
                FUNC_REDEEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(secret)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<BigInteger, BigInteger, byte[], byte[], String, String, String, BigInteger, BigInteger>> getSwapData(byte[] secretHash) {
        final Function function = new Function(FUNC_GETSWAPDATA,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(secretHash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Bytes32>() {
                }, new TypeReference<Bytes32>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint8>() {
                }));
        return new RemoteCall<Tuple9<BigInteger, BigInteger, byte[], byte[], String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple9<BigInteger, BigInteger, byte[], byte[], String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, byte[], byte[], String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, byte[], byte[], String, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (String) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public List<InitiatedEventResponse> getInitiatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INITIATED_EVENT, transactionReceipt);
        ArrayList<InitiatedEventResponse> responses = new ArrayList<InitiatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitiatedEventResponse typedResponse = new InitiatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.initiator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.recipient = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.asset = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.orderId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.secretHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.initTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.refundTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitiatedEventResponse> initiatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InitiatedEventResponse>() {
            @Override
            public InitiatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INITIATED_EVENT, log);
                InitiatedEventResponse typedResponse = new InitiatedEventResponse();
                typedResponse.log = log;
                typedResponse.initiator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.recipient = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.asset = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.orderId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.secretHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.initTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.refundTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InitiatedEventResponse> initiatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIATED_EVENT));
        return initiatedEventFlowable(filter);
    }

    public List<RedeemedEventResponse> getRedeemedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REDEEMED_EVENT, transactionReceipt);
        ArrayList<RedeemedEventResponse> responses = new ArrayList<RedeemedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RedeemedEventResponse typedResponse = new RedeemedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.redeemer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.secretHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.redeemTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.secret = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RedeemedEventResponse> redeemedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RedeemedEventResponse>() {
            @Override
            public RedeemedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REDEEMED_EVENT, log);
                RedeemedEventResponse typedResponse = new RedeemedEventResponse();
                typedResponse.log = log;
                typedResponse.redeemer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.secretHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.redeemTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.secret = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RedeemedEventResponse> redeemedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REDEEMED_EVENT));
        return redeemedEventFlowable(filter);
    }

    public List<RefundedEventResponse> getRefundedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REFUNDED_EVENT, transactionReceipt);
        ArrayList<RefundedEventResponse> responses = new ArrayList<RefundedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RefundedEventResponse typedResponse = new RefundedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.refunder = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orderId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.secretHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.refundTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RefundedEventResponse> refundedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RefundedEventResponse>() {
            @Override
            public RefundedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REFUNDED_EVENT, log);
                RefundedEventResponse typedResponse = new RefundedEventResponse();
                typedResponse.log = log;
                typedResponse.refunder = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orderId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.secretHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.refundTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RefundedEventResponse> refundedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFUNDED_EVENT));
        return refundedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<AssetDepositedEventResponse> getAssetDepositedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETDEPOSITED_EVENT, transactionReceipt);
        ArrayList<AssetDepositedEventResponse> responses = new ArrayList<AssetDepositedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetDepositedEventResponse typedResponse = new AssetDepositedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.asset = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.orderId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AssetDepositedEventResponse> assetDepositedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AssetDepositedEventResponse>() {
            @Override
            public AssetDepositedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETDEPOSITED_EVENT, log);
                AssetDepositedEventResponse typedResponse = new AssetDepositedEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.asset = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.orderId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AssetDepositedEventResponse> assetDepositedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETDEPOSITED_EVENT));
        return assetDepositedEventFlowable(filter);
    }

    public List<AssetWithdrawalEventResponse> getAssetWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETWITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<AssetWithdrawalEventResponse> responses = new ArrayList<AssetWithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetWithdrawalEventResponse typedResponse = new AssetWithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.asset = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.orderId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AssetWithdrawalEventResponse> assetWithdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AssetWithdrawalEventResponse>() {
            @Override
            public AssetWithdrawalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETWITHDRAWAL_EVENT, log);
                AssetWithdrawalEventResponse typedResponse = new AssetWithdrawalEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.asset = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.orderId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AssetWithdrawalEventResponse> assetWithdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETWITHDRAWAL_EVENT));
        return assetWithdrawalEventFlowable(filter);
    }

    @Deprecated
    public static DexContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DexContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DexContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DexContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DexContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DexContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DexContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DexContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DexContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DexContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DexContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DexContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DexContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DexContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DexContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DexContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class InitiatedEventResponse {
        public Log log;

        public String initiator;

        public String recipient;

        public String asset;

        public BigInteger orderId;

        public byte[] secretHash;

        public BigInteger initTimestamp;

        public BigInteger refundTimestamp;

        public BigInteger amount;
    }

    public static class RedeemedEventResponse {
        public Log log;

        public String redeemer;

        public byte[] secretHash;

        public BigInteger redeemTimestamp;

        public byte[] secret;
    }

    public static class RefundedEventResponse {
        public Log log;

        public String refunder;

        public BigInteger orderId;

        public byte[] secretHash;

        public BigInteger refundTime;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class AssetDepositedEventResponse {
        public Log log;

        public String user;

        public String asset;

        public BigInteger orderId;

        public BigInteger amount;
    }

    public static class AssetWithdrawalEventResponse {
        public Log log;

        public String user;

        public String asset;

        public BigInteger orderId;

        public BigInteger amount;
    }
}
